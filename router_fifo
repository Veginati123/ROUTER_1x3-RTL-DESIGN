module router_fifo(clk, rstn,write_enb,rd_enb,soft_rst,data_in,data_out,empty,full,lfd_state);
input [7:0] data_in;
input clk,rstn,write_enb,soft_rst,rd_enb,lfd_state;
output full,empty;
output reg[7:0] data_out;
reg [8:0] mem[15:0];
reg[6:0] fifo_counter;
reg[4:0] rd_pt,wr_pt;//used to point the address of fifo
reg lfd_temp;
integer i,j;
//delay lfd by one clock cycle
always@(posedge clk)
begin
if(!rstn)
lfd_temp <= 0;
else
lfd_temp <= lfd_state;
end

//logic for incrementing the pointer
always@(posedge clk)
begin
if(!rstn)
begin
rd_pt <= 5'b00000;
wr_pt <= 5'b00000;
end
else if(soft_rst)
begin
rd_pt <= 5'b00000;
wr_pt <= 5'b00000;
end
else
begin
if(!full&&write_enb)
wr_pt <= wr_pt+1;
else
wr_pt <= wr_pt;
if(!empty&&rd_enb)
rd_pt <= rd_pt-1;
else
rd_pt <= rd_pt;
end
end
//fifo downcounter logic
always@(posedge clk)
begin
if(!rstn)
fifo_counter <= 7'b0;
else if(soft_rst)
 fifo_counter <= 7'b0;
else if(rd_enb&~empty)
begin
if(mem[rd_pt[3:0]][8]==1'b1)
fifo_counter <= mem[rd_pt[3:0]][7:2]+1'b1;
else if(fifo_counter!=0)
fifo_counter <= fifo_counter-1'b1;
end
end
//read operation
always@(posedge clk)
begin
if(!rstn)
data_out <= 8'b000000000;
else if(soft_rst)
data_out <= 8'bzzzzzzzz;
else if(rd_enb&&~empty)
data_out <= mem[rd_pt[3:0]];
end
//write operation
always@(posedge clk)
begin
if(!rstn)
for(i=0;i<=15;i=i+1)
mem[i] <=0;
else if(soft_rst)
for(j=0;j<=15;j=j+1)
mem[j] <=0;
else
begin
if(write_enb&&!full)
{mem[wr_pt[3:0]][8],mem[wr_pt[3:0]][7:0]} <= {lfd_state,data_in};
else
wr_pt <=wr_pt;
end
end
//full and empty
assign empty = (rd_pt[3:0]==wr_pt[3:0])?1'b1:1'b0;
assign full = (wr_pt[3:0]==4'b1111)?1'b1:1'b0;
endmodule

